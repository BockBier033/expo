{"version":3,"file":"SessionUrlProvider.js","sourceRoot":"","sources":["../src/SessionUrlProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/react-native-adapter';\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport { resolveScheme } from 'expo-linking/build/Schemes';\nimport qs from 'qs';\n\nconst { manifest } = Constants;\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(urlPath?: string): string {\n    const hostAddress = SessionUrlProvider.getHostAddress();\n    const isExpoHosted =\n      hostAddress.hostUri &&\n      (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(\n        hostAddress.hostUri\n      ) ||\n        (!!manifest.developer &&\n          Constants.executionEnvironment === ExecutionEnvironment.StoreClient));\n\n    let scheme = 'exp';\n    let path = SessionUrlProvider.SESSION_PATH;\n    const manifestScheme = resolveScheme({});\n\n    const isCustomEnvironment = [\n      ExecutionEnvironment.Standalone,\n      ExecutionEnvironment.Bare,\n    ].includes(Constants.executionEnvironment);\n    if (isCustomEnvironment && manifestScheme) {\n      scheme = manifestScheme;\n    }\n\n    let hostUri = hostAddress.hostUri || '';\n    if (isCustomEnvironment && manifestScheme && isExpoHosted) {\n      hostUri = '';\n    }\n\n    if (path) {\n      if (isExpoHosted && hostUri) {\n        path = `/--/${SessionUrlProvider.removeLeadingSlash(path)}`;\n      }\n\n      if (!path.startsWith('/')) {\n        path = `/${path}`;\n      }\n    } else {\n      path = '';\n    }\n\n    if (urlPath) {\n      path = [path, urlPath].filter(Boolean).join('/');\n    }\n\n    let { parameters } = hostAddress;\n    if (parameters) {\n      parameters = `?${parameters}`;\n    } else {\n      parameters = '';\n    }\n\n    hostUri = SessionUrlProvider.removeTrailingSlash(hostUri);\n    return encodeURI(`${scheme}://${hostUri}${path}${parameters}`);\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string): string {\n    const queryString = qs.stringify({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl()}/start?${queryString}`;\n  }\n\n  getRedirectUrl(urlPath?: string): string {\n    if (Platform.OS === 'web') {\n      return [window.location.origin, urlPath].filter(Boolean).join('/');\n    }\n\n    const legacyExpoProjectId = manifest.currentFullName || manifest.id;\n\n    if (!legacyExpoProjectId) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that currentFullName is defined by running `expo config --type public | grep currentFullName`';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n      throw new Error(\n        'Cannot use AuthSession proxy because the project ID is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectId}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectId, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddress(): { hostUri: string; parameters: string | undefined } {\n    let hostUri: string = Constants.manifest?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    const uriParts = hostUri?.split('?');\n    const parameters = uriParts?.[1];\n    if (uriParts?.length > 0) {\n      hostUri = uriParts[0];\n    }\n\n    return { hostUri, parameters };\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n\n  private static removeTrailingSlash(url: string) {\n    return url.replace(/\\/$/, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"]}